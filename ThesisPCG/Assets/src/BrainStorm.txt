TODO

need immutable parameter and a port parameter


for more efficietn drawing source.Buffer(TimeSpan.FromMilliseconds(100), 50). This means the longest we will block the UI is about 100ms to process a batch of 50 values, and we will never have values waiting for longer than 100ms before they are processed.

put all file loading in unit itself, static variables are defined before running unity

for example for the bitmap ask for texture in unity itself

generic source nodes for random distributions dont need name

they can be transformed and encapsulated which can be given a name


throw warning when trying to change linke between nodes

ask rian about crash (io conflict with debug.log?)


create a seperate constructor (or static method) for a parameter without value that only serves as port

->try to work with immutable objects, especially the parameters

add a method dimension to the parameters, as the dimensions of parameters should match too
Parameter can be a multidimensional vector

try to throw the possible class cast exception in a parameter verbally



//this will be used for backtracking later in edit propagation
			// a blackbox parameters is processed inside the generator node and the process' result is assigned to a generators result propery
			//a whitebox parameter is immutable and is directly linked to the generators result property
			//if a parameters weight as input is a scalar that reflects it's amount of influence in the output it is white box
			//data can be blackbox too, for example a simulated population that output its varying properties based on input parameters
			/*	public enum Type
		{
			BLACKBOX,
			WHITEBOX
		}*/


		TODO implement similarly to Parameter (hidden generics) also TupelParameter and 2DParameter
		and sourceNode as well



		generics would be possible if working with Tuples instead of dictionaries
		This would result in a fixed amount of parameters at compile time, which isn't neccesarly a problem


		ITarget<T>
		ISource<T>

		T->Tuple<T1,T2,T3,...>
